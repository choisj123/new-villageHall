<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>board-sql.xml</comment>
	
	<!-- 내 게시글 조회 -->
	<entry key="selectMyBoardList">
		<![CDATA[
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM(
				SELECT B.BOARD_NO, B.BOARD_TITLE,
				CASE 
	       		WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	            THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	        	WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	        	WHEN SYSDATE - BOARD_CREATE_DATE < 1
	            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	        	ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    		END BOARD_CREATE_DATE, 
				 B.READ_COUNT, COUNT(L.BOARD_NO) AS LIKE_COUNT, CATEGORY_NAME,
					(    
			    	SELECT COUNT(*) 
			    	FROM "COMMENT" c 
			   	 	WHERE c.BOARD_NO = B.BOARD_NO
		        	AND c.COMMENT_DELETE_FG = 'N'
			    	) AS COMMENT_COUNT
				FROM BOARD B
				JOIN "USER" U ON B.USER_NO = U.USER_NO
				LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
				JOIN CATEGORY USING(CATEGORY_NO)
				WHERE U.USER_NO = ?
				AND BOARD_DELETE_FG = 'N'
				GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CREATE_DATE, B.READ_COUNT, CATEGORY_NAME
				ORDER BY B.BOARD_NO DESC
			) A
		)
		WHERE RNUM BETWEEN ? AND ?
		]]>
	</entry>
	
	<!-- 내 댓글 조회  -->
	<entry key="selectMyCommentList">
		<![CDATA[
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM(
				SELECT COMMENT_CONTENT, 
				CASE 
	       		WHEN SYSDATE - COMMENT_CREATE_DATE < 1/24/60
	            THEN FLOOR((SYSDATE - COMMENT_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	        	WHEN SYSDATE - COMMENT_CREATE_DATE < 1/24
	            THEN FLOOR((SYSDATE-COMMENT_CREATE_DATE) * 24 * 60) || '분 전'
	        	WHEN SYSDATE - COMMENT_CREATE_DATE < 1
	            THEN FLOOR((SYSDATE-COMMENT_CREATE_DATE) * 24) || '시간 전'
	        	ELSE TO_CHAR(COMMENT_CREATE_DATE, 'YYYY-MM-DD')
	    		END COMMENT_CREATE_DATE,  
				BOARD_TITLE, BOARD_NO
				FROM "COMMENT" C
				JOIN BOARD USING (BOARD_NO)
				JOIN "USER" U ON U.USER_NO = C.USER_NO
				WHERE C.COMMENT_DELETE_FG = 'N' AND BOARD_DELETE_FG = 'N' AND U.USER_NO = ?
				ORDER BY C.COMMENT_CREATE_DATE DESC
			) A
		)
		WHERE RNUM BETWEEN ? AND ?
		]]>
	</entry>
	
	<!-- 내 좋아요 조회 -->
	<entry key="selectMyLikeList">
	<![CDATA[
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM(
				SELECT B.BOARD_NO, B.BOARD_TITLE, 
				CASE 
	       		WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	            THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	        	WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	        	WHEN SYSDATE - BOARD_CREATE_DATE < 1
	            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	        	ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    		END BOARD_CREATE_DATE,
				U.USER_NICKNAME, B.READ_COUNT, COUNT(*) AS LIKE_COUNT, CATEGORY_NAME,
					(    
			    	SELECT COUNT(*) 
			    	FROM "COMMENT" c 
			   	 	WHERE c.BOARD_NO = B.BOARD_NO
		        	AND c.COMMENT_DELETE_FG = 'N'
			    	) AS COMMENT_COUNT
				FROM BOARD B
				JOIN "USER" U ON B.USER_NO = U.USER_NO
				LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
				JOIN CATEGORY USING(CATEGORY_NO)
				WHERE B.BOARD_DELETE_FG = 'N' AND B.BOARD_NO IN (SELECT BOARD_NO FROM "LIKE" WHERE USER_NO = ? )
				GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CREATE_DATE, U.USER_NICKNAME, B.READ_COUNT, CATEGORY_NAME
				ORDER BY B.BOARD_NO DESC
			) A
		)
		WHERE RNUM BETWEEN ? AND ?
		]]>
	</entry>
	
	<!-- 인기 게시글 조회수 순 정렬 -->
	<entry key="sortByReadCount">
		<![CDATA[
		SELECT ROWNUM, A.*
		FROM (SELECT B.BOARD_NO, B.BOARD_TITLE, 
		CASE 
	       WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	       THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	       WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	       THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	       WHEN SYSDATE - BOARD_CREATE_DATE < 1
	       THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	       ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    END BOARD_CREATE_DATE,
		USER_NICKNAME ,B.READ_COUNT, COUNT(L.BOARD_NO) AS LIKE_COUNT, CATEGORY_NAME,
			(    
			SELECT COUNT(*) 
			FROM "COMMENT" c 
			WHERE c.BOARD_NO = B.BOARD_NO
		    AND c.COMMENT_DELETE_FG = 'N'
			) AS COMMENT_COUNT
		FROM BOARD B
		JOIN "USER" U ON B.USER_NO = U.USER_NO
		LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
		JOIN CATEGORY USING(CATEGORY_NO)
		WHERE BOARD_DELETE_FG = 'N' AND SYSDATE - BOARD_CREATE_DATE < 14 AND CATEGORY_NO IN (3,4,5,6,7,8) 
		GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CREATE_DATE, USER_NICKNAME, B.READ_COUNT, CATEGORY_NAME
		ORDER BY B.READ_COUNT DESC) A
		WHERE ROWNUM <= 20
		]]>
	</entry>
		
	<!-- 내게시글 수 조회 -->
	<entry key="getMyBoardListCount">
		SELECT COUNT(*)
		FROM BOARD
		WHERE BOARD_DELETE_FG = 'N' AND USER_NO = ?
	</entry>
	<!-- 내댓글 수 조회 -->
	<entry key="getMyCommentListCount">
		SELECT COUNT(*) 
		FROM "COMMENT" c
		JOIN BOARD USING (BOARD_NO) 
		WHERE COMMENT_DELETE_FG = 'N' AND BOARD_DELETE_FG = 'N' AND c.USER_NO = ?
	</entry>
	<!-- 내좋아요 수 조회 -->
	<entry key="getMyLikeListCount">
		SELECT COUNT(*)
		FROM "LIKE" l
		JOIN BOARD USING (BOARD_NO)
		WHERE BOARD_DELETE_FG = 'N' AND l.USER_NO = ?
	</entry>
	
	<!-- 인기 게시글 좋아요 순 정렬 -->
	<entry key="sortByLikeCount">
		<![CDATA[
		SELECT ROWNUM, A.*
		FROM (SELECT B.BOARD_NO, B.BOARD_TITLE, 
		CASE 
	       WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	       THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	       WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	       THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	       WHEN SYSDATE - BOARD_CREATE_DATE < 1
	       THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	       ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    END BOARD_CREATE_DATE,
		USER_NICKNAME ,B.READ_COUNT, COUNT(L.BOARD_NO) AS LIKE_COUNT, CATEGORY_NAME,
			(    
			SELECT COUNT(*) 
			FROM "COMMENT" c 
			WHERE c.BOARD_NO = B.BOARD_NO
		    AND c.COMMENT_DELETE_FG = 'N'
			) AS COMMENT_COUNT
		FROM BOARD B
		JOIN "USER" U ON B.USER_NO = U.USER_NO
		LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
		JOIN CATEGORY USING(CATEGORY_NO)
		WHERE BOARD_DELETE_FG = 'N' AND SYSDATE - BOARD_CREATE_DATE < 14 AND CATEGORY_NO IN (3,4,5,6,7,8) 
		GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CREATE_DATE, USER_NICKNAME, B.READ_COUNT, CATEGORY_NAME
		ORDER BY LIKE_COUNT DESC) A
		WHERE ROWNUM <= 20
		]]>
	</entry>
	
	<!-- 게시글 상세 조회 -->
	<entry key="selectBoardDetail">
	<![CDATA[
		SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, 
		
		CASE 
	        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	            THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	        WHEN SYSDATE - BOARD_CREATE_DATE < 1
	            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	        ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    END BOARD_CREATE_DATE, 
		
		USER_NICKNAME ,B.READ_COUNT, COUNT(L.BOARD_NO) AS LIKE_COUNT, CATEGORY_NAME, CATEGORY_NO 
		FROM BOARD B
		JOIN "USER" U ON B.USER_NO = U.USER_NO
		LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
		JOIN CATEGORY USING(CATEGORY_NO)
		WHERE BOARD_DELETE_FG = 'N' AND B.BOARD_NO = ?
		GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_CREATE_DATE, USER_NICKNAME, B.READ_COUNT, CATEGORY_NAME, CATEGORY_NO 
	]]>
	</entry>
	
  <!-- 카카오맵리스트  -->
	 <entry key="kakaoMapList">
	 <![CDATA[
		SELECT B.BOARD_NO, BOARD_TITLE, BOARD_CONTENT,
		    CASE 
		        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
		            THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
		        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
		            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
		        WHEN SYSDATE - BOARD_CREATE_DATE < 1
		            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
		        ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
		    END BOARD_CREATE_DATE,
		    LATITUDE, LONGITUDE, CATEGORY_NAME,  USER_NICKNAME, PROFILE_IMG, 
		    COUNT(L.BOARD_NO) AS TOTAL_LIKES,
		    (    
			    SELECT COUNT(*) 
			    FROM "COMMENT" c 
			    WHERE c.BOARD_NO = B.BOARD_NO
		        AND c.COMMENT_DELETE_FG = 'N'
			    ) AS COMMENT_COUNT
		FROM 
		    BOARD B
		    JOIN "USER" U ON B.USER_NO = U.USER_NO
		    LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
		    JOIN CATEGORY USING(CATEGORY_NO)
		WHERE BOARD_DELETE_FG = 'N'     
		GROUP BY BOARD_TITLE, BOARD_CONTENT, BOARD_CREATE_DATE, 
		    LATITUDE, LONGITUDE, CATEGORY_NAME, USER_NICKNAME, 
		    B.BOARD_NO, PROFILE_IMG

	  ]]>
	</entry>
	
	<!-- 조회수 증가  -->
	<entry key="updateRead">
		UPDATE BOARD SET READ_COUNT = READ_COUNT +1
		WHERE BOARD_NO = ?	
	</entry>
	
	<!-- 좋아요 확인 -->
	<entry key="selectLike">
		SELECT COUNT(*)
		FROM "LIKE"
		WHERE USER_NO = ? AND BOARD_NO = ?
	</entry>
	
	<!-- 좋아요 추가 -->
	<entry key="updateLike">
		INSERT INTO "LIKE" VALUES (?, ?)
	</entry>
	
	<!-- 좋아요 삭제 -->
	<entry key="deleteLike">
		DELETE FROM "LIKE" WHERE USER_NO = ? AND BOARD_NO = ?
	</entry>
	
	<entry key="deleteBoard">
		UPDATE BOARD SET BOARD_DELETE_FG = 'Y'
		WHERE BOARD_NO = ?
	</entry>
	
	
	<entry key="kakaoMapBoardRecent">
	<![CDATA[
		SELECT BOARD_TITLE, 
			CASE 
		        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
		            THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
		        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
		            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
		        WHEN SYSDATE - BOARD_CREATE_DATE < 1
		            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
		        ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
		    END BOARD_CREATE_DATE,
		CATEGORY_NAME, USER_NICKNAME, BOARD_NO, PROFILE_IMG, BOARD_DELETE_FG
		FROM BOARD
		LEFT JOIN "USER" "LIKE"  USING(USER_NO)
		LEFT JOIN "CATEGORY"   USING(CATEGORY_NO)
		WHERE TYPE_NO = 3 AND BOARD_DELETE_FG  = 'N'
		ORDER BY BOARD_CREATE_DATE DESC
	]]>
	</entry>
	
	<!-- 게시글 상세조회 내 댓글수 조회 -->
	<entry key="getCommentListCount">
		SELECT COUNT(*) 
		FROM "COMMENT" c
		JOIN BOARD b ON b.BOARD_NO = c.BOARD_NO
		WHERE b.BOARD_NO = ? AND COMMENT_DELETE_FG = 'N' AND BOARD_DELETE_FG = 'N'
	</entry>

	<!-- 게시글 상세조회 내 댓글 조회 -->
	<entry key="selectCommentList">
	<![CDATA[
		SELECT * FROM (
			SELECT ROWNUM RNUM, A.* FROM(
				SELECT COMMENT_NO, PROFILE_IMG, USER_NICKNAME, COMMENT_CONTENT, 
					CASE 
				        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
				            THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
				        WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
				            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
				        WHEN SYSDATE - BOARD_CREATE_DATE < 1
				            THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
				        ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
		    		END BOARD_CREATE_DATE
				FROM "COMMENT" c
				JOIN BOARD b ON b.BOARD_NO = c.BOARD_NO
				JOIN "USER" u ON c.USER_NO = u.USER_NO
				WHERE b.BOARD_NO = ? AND COMMENT_DELETE_FG = 'N' AND BOARD_DELETE_FG = 'N'
			) A
		)
		WHERE RNUM BETWEEN ? AND ?
	]]>
	</entry>

	
	<!-- 게시글 등록 -->
	<entry key="insertBoard">
		INSERT INTO "BOARD"(BOARD_TITLE, BOARD_CONTENT, BOARD_CREATE_DATE, READ_COUNT, LATITUDE, LONGITUDE, BOARD_DELETE_FG ,CATEGORY_NO, USER_NO) 
       	VALUES( ? , ?, SYSDATE,  DEFAULT,  ? , ?, DEFAULT, ? , ?)
	</entry>
	
	<!-- 게시글 IMAGE 이미지 삽입 -->
	<entry key="insertImage">
	  INSERT INTO BOARD_IMG(FILE_NAME, FILE_PATH, BOARD_NO) VALUES( ?, ?, ?)
  </entry>
  
	<!-- 게시글 수정 -->
	<entry key="updateBoard">
		UPDATE BOARD SET BOARD_TITLE = ?, BOARD_CONTENT = ?, CATEGORY_NO = ?
		WHERE BOARD_NO = ?
	</entry>
	
		<!-- 게시글 번호 얻어오기 -->
	<entry key="getBoardNo">
		SELECT BOARD_NO
		FROM (SELECT * FROM board 
		ORDER BY BOARD_CREATE_DATE DESC) 
		WHERE rownum=1
	</entry>
	
	<!-- 메인페이지 인기게시글 목록 조회 -->
	<entry key="selectMainPagePopularBoard">
		SELECT ROWNUM, A.*
		FROM (SELECT B.BOARD_NO, B.BOARD_TITLE, B.READ_COUNT,
			(    
			SELECT COUNT(*) 
			FROM "COMMENT" c 
			WHERE c.BOARD_NO = B.BOARD_NO
		    AND c.COMMENT_DELETE_FG = 'N'
			) AS COMMENT_COUNT
		FROM BOARD B
		JOIN "USER" U ON B.USER_NO = U.USER_NO
		LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
		WHERE BOARD_DELETE_FG = 'N' AND SYSDATE - BOARD_CREATE_DATE &lt; 7 AND CATEGORY_NO IN(3, 4, 5, 6, 7, 8)
		GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.READ_COUNT
		ORDER BY B.READ_COUNT DESC) A
		WHERE ROWNUM &lt;= 10
	</entry>
	
	<!-- 메인페이지 공지사항 목록 조회 -->
	<entry key="selectMainPageNotice">
		SELECT ROWNUM, A.*
		FROM (SELECT BOARD_NO, BOARD_TITLE, READ_COUNT
		FROM BOARD
		WHERE BOARD_DELETE_FG = 'N' AND CATEGORY_NO = '1'
		ORDER BY BOARD_CREATE_DATE DESC) A
		WHERE ROWNUM &lt;= 10
	</entry>
	
	<!-- 게시판 이름 조회 -->
	<entry key="selectBoardName">
		SELECT TYPE_NO
		FROM CATEGORY 
		WHERE TYPE_NO = ?
	</entry>
	
	<!-- 게시판 이름 조회 -->
	<entry key="selectBoardName">
		SELECT TYPE_NO
		FROM CATEGORY 
		WHERE TYPE_NO = ?
	</entry>
	
	<!-- 특정 게시판의 전체 게시글 수 조회 -->
	<entry key="getListCount">
		SELECT COUNT(*) FROM BOARD
		JOIN CATEGORY USING (CATEGORY_NO)
		WHERE BOARD_DELETE_FG = 'N'
		AND TYPE_NO = ?
	</entry>
	
	<!-- 게시글 목록 조회 -->
	<entry key="selectBoardList1">
		<![CDATA[
		SELECT * FROM(
			SELECT ROWNUM RNUM, A.* FROM(
				SELECT B.BOARD_NO, B.BOARD_TITLE, 
					CASE 
	       				WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	       				THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	       				WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	       				THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	       				WHEN SYSDATE - BOARD_CREATE_DATE < 1
	       				THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	       				ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    			END BOARD_CREATE_DATE,
					USER_NICKNAME ,B.READ_COUNT, COUNT(L.BOARD_NO) AS LIKE_COUNT, 
					CATEGORY_NAME, BOARD_CONTENT,
					(    
					SELECT COUNT(*) 
					FROM "COMMENT" c 
					WHERE c.BOARD_NO = B.BOARD_NO
		    		AND c.COMMENT_DELETE_FG = 'N'
					) AS COMMENT_COUNT
				FROM BOARD B
				JOIN "USER" U ON B.USER_NO = U.USER_NO
				LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
				JOIN CATEGORY USING(CATEGORY_NO)
				WHERE BOARD_DELETE_FG = 'N' 
				AND TYPE_NO = ?
				]]>
	</entry>
	
	<entry key="selectBoardList2">
		GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CREATE_DATE, 
					USER_NICKNAME, B.READ_COUNT, CATEGORY_NAME, BOARD_CONTENT
				ORDER BY B.BOARD_NO DESC
			) A
		)
		WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 검색한 게시글 수 조회 -->
	<entry key="searchListCount">
		SELECT COUNT(*) FROM BOARD
		JOIN "USER" USING(USER_NO)
		JOIN CATEGORY USING(CATEGORY_NO)
		WHERE BOARD_DELETE_FG = 'N'
		AND TYPE_NO = ?
	</entry>
	
	<!-- 검색한 게시글 목록 조회 -->
	<entry key="searchBoardList1">
		<![CDATA[
		SELECT * FROM(
			SELECT ROWNUM RNUM, A.* FROM(
				SELECT B.BOARD_NO, B.BOARD_TITLE, 
					CASE 
	       				WHEN SYSDATE - BOARD_CREATE_DATE < 1/24/60
	       				THEN FLOOR((SYSDATE - BOARD_CREATE_DATE) * 24 * 60 * 60) || '초 전'
	       				WHEN SYSDATE - BOARD_CREATE_DATE < 1/24
	       				THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24 * 60) || '분 전'
	       				WHEN SYSDATE - BOARD_CREATE_DATE < 1
	       				THEN FLOOR((SYSDATE-BOARD_CREATE_DATE) * 24) || '시간 전'
	       				ELSE TO_CHAR(BOARD_CREATE_DATE, 'YYYY-MM-DD')
	    			END BOARD_CREATE_DATE,
					USER_NICKNAME ,B.READ_COUNT, COUNT(L.BOARD_NO) AS LIKE_COUNT, 
					CATEGORY_NAME, BOARD_CONTENT
				FROM BOARD B
				JOIN "USER" U ON B.USER_NO = U.USER_NO
				LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
				JOIN CATEGORY USING(CATEGORY_NO)
				WHERE BOARD_DELETE_FG = 'N' 
				AND TYPE_NO = ?
		]]>
				
	</entry>
	
	<entry key="searchBoardList2">
			GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CREATE_DATE, 
					USER_NICKNAME, B.READ_COUNT, CATEGORY_NAME, BOARD_CONTENT
			ORDER BY BOARD_NO DESC
		   ) A
		)
		WHERE RNUM BETWEEN ? AND ? 
	</entry>
	
	
	<!-- 댓글 등록 -->
	<entry key="insertComment">
		INSERT INTO "COMMENT" (COMMENT_CONTENT, COMMENT_CREATE_DATE, COMMENT_DELETE_FG, USER_NO, BOARD_NO)
		VALUES(?, DEFAULT, DEFAULT, ?, ?)
	</entry>
	
	<!-- 댓글 삭제 -->
	<entry key="deleteComment">
		UPDATE "COMMENT" SET COMMENT_DELETE_FG = 'Y'
		WHERE BOARD_NO = ? AND COMMENT_NO = ?
	</entry>
	
	<!-- 댓글 수정 -->
	<entry key="updateComment">
		UPDATE "COMMENT" SET COMMENT_CONTENT = ?
		WHERE COMMENT_NO = ?
	</entry>




</properties>